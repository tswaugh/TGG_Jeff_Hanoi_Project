&ACCESS RVO
&REL 1
&COMMENT PLC programm ARC-TECH
DEF  ARCSPS ( )
  ;FOLD DECLARATIONS;%{PE}%V3.2.0,%MKUKATPBASIS,%CINIT,%VCOMMON,%P
  ;FOLD BASIS DECL;%{PE}%V3.2.0,%MKUKATPBASIS,%CINIT,%VCOMMON,%P
  DECL INT WFD_PLUS,WFD_MINUS,OLD_WFD
  ;Automatik extern
  DECL STATE_T STAT
  DECL MODUS_T MODE
  ;ENDFOLD (BASIS DECL)
  ;FOLD USER DECL;%{PE}%V3.2.0,%MKUKATPBASIS,%CINIT,%VCOMMON,%P
  ; Please insert user defined declarations

  ;ENDFOLD (USER DECL)
  ;ENDFOLD (DECLARATIONS)
  ;FOLD INI;%{PE}%V3.2.0,%MKUKATPBASIS,%CINIT,%VCOMMON,%P
  ;FOLD AUTOEXT INIT;%{E}%V3.2.0,%MKUKATPBASIS,%CSPS,%VAUTOEXT,%P
  INTERRUPT DECL 91 WHEN $PRO_STATE1==#P_FREE DO RESET_REFL_OUT ()
  INTERRUPT ON 91
  $LOOP_MSG[]="                                                            "
  MODE=#SYNC
  $H_POS=$H_POS
  ;Automatik extern
  IF $MODE_OP==#EX THEN
    CWRITE($CMD,STAT,MODE,"RUN /R1/CELL()")
  ENDIF
  ;ENDFOLD (AUTOEXT INIT)
  ;FOLD ARC10 PLC INIT;%{E}%V3.2.0,%MKUKATPARC,%CSPS,%VSPS,%P
  IF A10_OPTION==#ACTIVE THEN
    PRE_INIT (WFD_PLUS,WFD_MINUS,OLD_WFD )
    A50 (#SENS_SUB_INI )
    INTERRUPT DECL 21 WHEN A_TCHSTP_STS==#ACTIVE DO A10 (#I_PRET_STP )
    INTERRUPT ON 21
  ENDIF
  ;ENDFOLD (ARC10 PLC INIT)
  ;FOLD USER INIT;%{E}%V3.2.0,%MKUKATPBASIS,%CSPS,%VAUTOEXT,%P
  ; Please insert user defined initialization commands

  ;ENDFOLD (USER INIT)
  ;ENDFOLD (INI)

  LOOP
    WAIT FOR NOT($POWER_FAIL)
    ;FOLD ARC10 PLC;%{}%V3.2.0,%MKUKATPARC,%CSPS,%VSPS,%P
    IF A10_OPTION==#ACTIVE THEN
      SPS_TASK_ARC (WFD_PLUS,WFD_MINUS,OLD_WFD )
    ENDIF
    ;ENDFOLD (ARC10 PLC)
    ;FOLD TOUCH PLC;%{E}%V3.2.0,%MKUKATPTS,%CSPS,%VSPS,%P
    IF H70_OPTION THEN
      IF ( NOT ($PRO_ACT) AND FG_ON_WORK AND ($OV_PRO==0)) THEN
        IF (TOUCH_ACTIVE>0) AND (TOUCH_ACTIVE<5) THEN
          IF TOUCH_O[TOUCH_ACTIVE].OUT_NR>0 THEN
            $OUT[TOUCH_O[TOUCH_ACTIVE].OUT_NR]=FALSE
          ENDIF
        ENDIF
        NOTAUS_TOUCH=TRUE ; Flag fuer STOERUNG
        $OV_PRO=OV_PRO_OLD
      ENDIF
    ENDIF
    ;ENDFOLD (TOUCH PLC)
    ;FOLD GRP PLC;%{E}%V3.2.0,%MKUKATPGRP,%CSPS,%VSPS,%P
    IF (ZANGEN_FUNKT>0) THEN
      H50 (5,AKT_ZANGE,DUMMY,GDEFAULT )
      ZANGEN_FUNKT=0
    ENDIF
    ;ENDFOLD (GRP PLC)
    ;FOLD SPOT PLC;%{E}%V3.2.0,%MKUKATPSPOT,%CSPS,%VSPS,%P
    ;Make your modifikations here

    ;ENDFOLD (SPOT PLC)
    ;FOLD USER PLC;%{E}%V3.2.0,%MKUKATPUSER,%CSPS,%VSPS,%P
    ;Make your modifikations here

    ;ENDFOLD (USER PLC)
  ENDLOOP
  ;FOLD ;%{H};
END
;ENDFOLD
;FOLD ;%{H}
;-------------
; CONTROL TASK 
; for ARC-TECH
;-------------
DEF  SPS_TASK_ARC (WFD_PLUS :OUT,WFD_MINUS :OUT,OLD_WFD :OUT )

  INT WFD_PLUS,WFD_MINUS,OLD_WFD

  ;Trigger for HPU OFF command
  IF (($PRO_STATE1==#P_STOP) AND (A_ARC_INSTR>=A_ARC_ON) AND (A_ARC_INSTR<=A_TECH_STOP) AND ((A_WLD_ACTIV==#ACTIVE) OR (A_GAS_FLOW==#ACTIVE))) THEN

    A_TCHSTP_STS=#ACTIVE ; trigger to switch OFF
    IF A_WLD_ACTIV==#ACTIVE THEN
      A_HOT_T_STOP=#ACTIVE ; flag for switch off from a HOT seam
    ENDIF
    RETRY_COUNT=0

  ELSE
    A_TCHSTP_STS=#IDLE
  ENDIF

  ;Trigger for initializing after R1-interpreter STOP
  IF (($PRO_STATE1==#P_ACTIVE) AND (A_HOT_T_STOP==#ACTIVE)) THEN

    A_TSTOP_CONT=#ACTIVE ;indirect TRIGGER ISR 5 to ARC_ON/ OFF: Task return sign from A10-ISR 
    A_HOT_T_STOP=#IDLE
    RETRY_COUNT=0
    WELD_AGAIN ( )

  ELSE
    A_TSTOP_CONT=#IDLE
  ENDIF

  ; preparation for once SWITCH ON Task  only when R1 interpreter active
  IF ((A_OLD_WELD<>A_HOT_WELD) AND ($PRO_STATE1==#P_ACTIVE)) THEN
    A_ISR_ACTION=#IDLE ; enable Trigger
    A_OLD_WELD=A_HOT_WELD
  ENDIF

  IF ((A_HOT_WELD==#ACTIVE) AND (A_ISR_ACTION==#IDLE) AND ($PRO_STATE1==#P_ACTIVE) AND (A_HOT_T_STOP==#IDLE) AND (A_HPU_CMD==#IDLE)) THEN

    IF ((A_ARC_INSTR>0) AND (A_ARC_INSTR<>A_SEAM_RDY)) THEN
      PULSE (A_FLY_ARC,TRUE,0.2 ) ;TRIGGER ISR 5 to ARC_ON: Task return sign from A10-ISR
    ENDIF

    A_ISR_ACTION=#ACTIVE

  ENDIF

  IF ((A_HOT_WELD==#IDLE) AND (A_ISR_ACTION==#IDLE) AND ($PRO_STATE1==#P_ACTIVE) AND (A_HOT_T_STOP==#IDLE) AND (A_HPU_CMD==#IDLE)) THEN

    IF ((A_WLD_ACTIV==#ACTIVE) OR (A_GAS_FLOW==#ACTIVE)) THEN
      PULSE (A_FLY_ARC,TRUE,0.2 ) ;TRIGGER ISR 5 to ARC_OFF: Task return sign from A10-ISR
    ENDIF

    A_ISR_ACTION=#ACTIVE

  ENDIF

  IF ($PRO_STATE1==#P_STOP) AND (A_CLEANER==#ACTIVE) THEN
    A10 (#CLEAN_OFF )
  ENDIF

  IF (OLD_WFD<>A_HPU_WFD) THEN
    IF A_HPU_WFD<>0 THEN
      OLD_WFD=A_HPU_WFD
      IF (A_HPU_WFD>0) THEN
        IF WFD_PLUS<>0 THEN
          $OUT[WFD_PLUS]=A_O_WRFEDP.STATE
        ENDIF
      ENDIF
      IF (A_HPU_WFD<0) THEN
        IF WFD_MINUS<>0 THEN
          $OUT[WFD_MINUS]=A_O_WRFEDN.STATE
        ENDIF
      ENDIF
    ELSE
      OLD_WFD=A_HPU_WFD
      IF WFD_PLUS<>0 THEN
        $OUT[WFD_PLUS]= NOT (A_O_WRFEDP.STATE)
      ENDIF
      IF WFD_MINUS<>0 THEN
        $OUT[WFD_MINUS]= NOT (A_O_WRFEDN.STATE)
      ENDIF
    ENDIF
  ENDIF

  A_FG_MECH1=A_WEAV_GEN[1]
  A_FG_MECH2=A_WEAV_GEN[2]
  A_FG_THERM=A_WEAV_GEN[3]

END ;(SPS_TASK_ARC)
;-------------------
DEF  PRE_INIT (WFD_PLUS :OUT,WFD_MINUS :OUT,OLD_WFD :OUT )

  INT I,J,K,WFD_PLUS,WFD_MINUS,OLD_WFD

  TECH_MOTION=FALSE
  A_HPU_CMD=#IDLE
  A_HOT_T_STOP=#IDLE
  A_TCHSTP_STS=#IDLE
  A_TSTOP_CONT=#IDLE
  A_CLEANER=#IDLE
  A_WELD_MEM=#IDLE
  A_ISR_SELECT=FALSE
  A_HPU_WFD=0
  A_FG_MECH1=A_WEAV_GEN[1]
  A_FG_MECH2=A_WEAV_GEN[2]
  A_FG_THERM=A_WEAV_GEN[3]

  A_OLD_WELD=A_HOT_WELD
  A_WLD_ACTIV=#IDLE
  A_ARC_INSTR=A_ARC_IDLE

  FOR I=1 TO  2 ;necessary for block select without executing INIT
    FOR J=1 TO  8
      FOR K=1 TO  4
        A_ANA_VAL[I,J,K].M=0.001
        A_ANA_VAL[I,J,K].N=0.001
      ENDFOR
    ENDFOR
  ENDFOR

  A_ANA_CLC_ON=#ACTIVE
  A_ISR_ACTION=#ACTIVE
  SAVE_OVR=0

  WFD_PLUS=0
  WFD_MINUS=0

  IF (A_O_WRFEDP.NO>0) THEN
    IF (A_WLD_OUT[A_O_WRFEDP.NO].OUT_NR>0) THEN
      WFD_PLUS=A_WLD_OUT[A_O_WRFEDP.NO].OUT_NR
    ENDIF
  ENDIF

  OLD_WFD=0

  IF A_O_WRFEDN.NO>0 THEN
    IF (A_WLD_OUT[A_O_WRFEDN.NO].OUT_NR>0) THEN
      WFD_MINUS=A_WLD_OUT[A_O_WRFEDN.NO].OUT_NR
    ENDIF
  ENDIF

END ;(PRE_INIT)
;--------------------------------
DEF  WELD_AGAIN ( )
  PULSE (A_FLY_ARC,TRUE,0.2 ) ;TRIGGER ISR 5 HPU_ON
  A_TSTOP_CONT=#IDLE
END ;(WELD_AGAIN)
;----------------------
DEF  RESET_REFL_OUT ( )
  INT N

  $LOOP_MSG[]="                                                            "
  IF REFLECT_PROG_NR == 1 THEN
    FOR N = 0 TO PGNO_LENGTH - 1
      $OUT[PGNO_FBIT_REFL + N] = FALSE
    ENDFOR
  ENDIF
END ;(RESET_REFL_OUT)
;ENDFOLD

;FOLD USER SUBROUTINE;%{H}%V3.2.0,%MKUKATPUSER,%CSPS,%VSPS,%P
;Integrate your user defined subroutines

;ENDFOLD (USER SUBROUTINE)